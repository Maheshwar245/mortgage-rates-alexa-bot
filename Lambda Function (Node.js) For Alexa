
/**
 * This sample demonstrates a simple skill built with the Amazon Alexa Skills Kit.
 * The Intent Schema, Custom Slots, and Sample Utterances for this skill, as well as
 * testing instructions are located at http://amzn.to/1LzFrj6
 *
 * For additional samples, visit the Alexa Skills Kit Getting Started guide at
 * http://amzn.to/1LGWsLG
 */
 'use strict';
 
 var speechOutput,providerCount,providerName,rateCount,mortgageCount,leastRate;
 var reprompt;
 var rateArray = [];
 var leastRateArray = [];
                          /************ Variable declaration ************/

 var welcomeOutput = "Hello, I am your mortgage advisor, Would you like to know the mortgage rates";
 var welcomeReprompt = "Hello, I am your mortgage advisor, Would you like to know the mortgage rates";

 var leaveWaitingTime = [
   "Wait a second I will check it for you",
   "Wait a sec",
   "Thank you wait a second"
 ];
 
                         /************* Firebase Functions *******************/
  
var https = require('https');

//  var got = require('got');

//var firebaseHost = "htcdrive-e87cc.firebaseio.com";
// var webServiceHost ="htc-drive.firebaseio.com"
                 /** Get data from Firebase **/
        


// --------------- Helpers that build all of the responses -----------------------

function buildSpeechletResponse(title, output, repromptText, shouldEndSession) {
    return {
        outputSpeech: {
            type: 'PlainText',
            text: output,
        },
        card: {
            type: 'Simple',
            title: `SessionSpeechlet - ${title}`,
            content: `SessionSpeechlet - ${output}`,
        },
        reprompt: {
            outputSpeech: {
                type: 'PlainText',
                text: repromptText,
            },
        },
        shouldEndSession,
    };
}

function buildResponse(sessionAttributes, speechletResponse) {
    console.log("Responding with " + JSON.stringify(speechletResponse));
    return {
        version: '1.0',
        sessionAttributes,
        response: speechletResponse,
    };
}

function buildSpeechletResponseWithDirectiveNoIntent() {
    console.log("in buildSpeechletResponseWithDirectiveNoIntent");
    return {
      "outputSpeech" : null,
      "card" : null,
      "directives" : [ {
        "type" : "Dialog.Delegate"
      } ],
      "reprompt" : null,
      "shouldEndSession" : false
    }
  }

  function buildSpeechletResponseDelegate(shouldEndSession) {
      return {
          outputSpeech:null,
          directives: [
                  {
                      "type": "Dialog.Delegate",
                      "updatedIntent": null
                  }
              ],
         reprompt: null,
          shouldEndSession: shouldEndSession
      }
  }


// --------------- Functions that control the skill's behavior -----------------------

                    /*********** Welcome response (Open command) *******************/

function getWelcomeResponse(callback) {
    console.log("in welcomeResponse");
    const sessionAttributes = {};
    const cardTitle = 'Welcome';
    const speechOutput = "Hello, I am your mortgage advisor, Would you like to know the mortgage rates";
    const repromptText = "Hello, I am your mortgage advisor, Would you like to know the mortgage rates";
    const shouldEndSession = true;

    callback(sessionAttributes,
        buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

                /*********** Methods for mortgage rates *******************/

/*************** top 5 mortgage values **************/

function checkMortgageRates(request, session, callback)
{
    var sessionAttributes={};
    var filledSlots = delegateSlotCollection(request, sessionAttributes, callback);
    var confirmationStatus = request.intent.slots.confirmationStatus.value;
    var userProviderName = request.intent.slots.providerName.value.toLowerCase();

     https.get('https://s3.us-east-2.amazonaws.com/mortgage-rates-service/full.json', (resp) => {
    let data = '';
    rateArray = [];

  // A chunk of data has been recieved.
    resp.on('data', (chunk) => {
    data += chunk;
    mortgageCount = JSON.parse(data).mortgages.length
     
    for(var i=0;i<mortgageCount;i++)
    {
    providerName = JSON.parse(data).mortgages[i].provider.toLowerCase();
    rateCount = JSON.parse(data).mortgages[i].rates.length
    
    if(userProviderName === providerName)
    {
    for(var j=0;j<rateCount;j++)
    {
     rateArray.push(JSON.parse(data).mortgages[i].rates[j].rate) 
    }
    }
    }
    });
    
});
    speechOutput = "Mortgage rates are " + rateArray ;
    callback(sessionAttributes,
    buildSpeechletResponse("HTC Fleet manager", speechOutput, "", true));
    
    /*
    https.get('https://s3.us-east-2.amazonaws.com/mortgage-rates-service/full.json', (resp) => {
    let data = '';
    rateArray = [];
    // leastRateArray = [];
//   // A chunk of data has been recieved.
    resp.on('data', (chunk) => {
    data += chunk;
    providerCount = JSON.parse(data).mortgages.length
    for(var i=0;i<providerCount;i++)
    {
//     // providerName = JSON.parse(data).mortgages[i].provider
    rateCount = JSON.parse(data).mortgages[i].rates.length
    
     rateArray.push(JSON.parse(data).mortgages[i]); 

//     for(var j=0;j<rateCount;j++)
//     {
//         leastRateArray.push(rateArray[j].rates[j].rate)
//     }
    }
    });
    
});
    //   speechOutput = "Mortgage provider name is " + rateArray.slice(0,5)  ;
        speechOutput = "Least Rate is " + rateArray  ;
        callback(sessionAttributes,
        buildSpeechletResponse("HTC Fleet manager", speechOutput, "", true));
    */
}


/************** Mortgage rates for particular provider ************/


function checkMortgageProviderRates(request, session, callback)
{
    var sessionAttributes={};
    var filledSlots = delegateSlotCollection(request, sessionAttributes, callback);
    var userProviderName = request.intent.slots.providerName.value.toLowerCase();
    
    
    https.get('https://s3.us-east-2.amazonaws.com/mortgage-rates-service/full.json', (resp) => {
    let data = '';
    rateArray = [];

  // A chunk of data has been recieved.
    resp.on('data', (chunk) => {
    data += chunk;
    mortgageCount = JSON.parse(data).mortgages.length
     
    for(var i=0;i<mortgageCount;i++)
    {
    providerName = JSON.parse(data).mortgages[i].provider.toLowerCase();
    rateCount = JSON.parse(data).mortgages[i].rates.length
    
    if(userProviderName === providerName)
    {
    for(var j=0;j<rateCount;j++)
    {
     rateArray.push(JSON.parse(data).mortgages[i].rates[j].rate) 
    }
    }
    }
    });
    
});
    speechOutput = "Mortgage provider name is " + rateArray ;
    callback(sessionAttributes,
    buildSpeechletResponse("HTC Fleet manager", speechOutput, "", true));
}



/************** sort array to ascending order ***************/

    function sortFloat(a,b) 
{ 
    return a - b; 
}
  
  
function handleSessionEndRequest(callback) {
    const cardTitle = 'Session Ended';
    const speechOutput = 'Thank you for using fleet manager. Have a nice day!';
    // Setting this to true ends the session and exits the skill.
    const shouldEndSession = true;

    callback({}, buildSpeechletResponse(cardTitle, speechOutput, null, shouldEndSession));
}

function delegateSlotCollection(request, sessionAttributes, callback){
  console.log("in delegateSlotCollection");
  console.log("  current dialogState: "+JSON.stringify(request.dialogState));

    if (request.dialogState === "STARTED") {
      console.log("in started");
      console.log("  current request: "+JSON.stringify(request));
      var updatedIntent=request.intent;
      //optionally pre-fill slots: update the intent object with slot values for which
      //you have defaults, then return Dialog.Delegate with this updated intent
      // in the updatedIntent property
      callback(sessionAttributes,
          buildSpeechletResponseWithDirectiveNoIntent());
    } else if (request.dialogState !== "COMPLETED") {
      console.log("in not completed");
      console.log("  current request: "+JSON.stringify(request));
      // return a Dialog.Delegate directive with no updatedIntent property.
      callback(sessionAttributes,
          buildSpeechletResponseWithDirectiveNoIntent());
    } else {
      console.log("in completed");
      console.log("  current request: "+JSON.stringify(request));
      console.log("  returning: "+ JSON.stringify(request.intent));
      // Dialog is now complete and all required slots should be filled,
      // so call your normal intent handler.
      return request.intent;
    }
}

function isSlotValid(request, slotName){
        var slot = request.intent.slots[slotName];
        //console.log("request = "+JSON.stringify(request)); //uncomment if you want to see the request
        var slotValue;

        //if we have a slot, get the text and store it into speechOutput
        if (slot && slot.value) {
            //we have a value in the slot
            slotValue = slot.value.toLowerCase();
            return slotValue;
        } else {
            //we didn't get a value in the slot.
            return false;
        }
}


// --------------- Events -----------------------

/**
 * Called when the session starts.
 */
function onSessionStarted(sessionStartedRequest, session) {
    console.log(`onSessionStarted requestId=${sessionStartedRequest.requestId}, sessionId=${session.sessionId}`);
}

/**
 * Called when the user launches the skill without specifying what they want.
 */
function onLaunch(request, session, callback) {
    //console.log(`onLaunch requestId=${launchRequest.requestId}, sessionId=${session.sessionId}`);
    console.log("in launchRequest");
    console.log("  request: "+JSON.stringify(request));
    // Dispatch to your skill's launch.
    getWelcomeResponse(callback);
}

/**
 * Called when the user specifies an intent for this skill.
 */
function onIntent(request, session, callback) {
    //console.log(`onIntent requestId=${intentRequest.requestId}, sessionId=${session.sessionId}`);
    console.log("in onIntent");
    console.log("  request: "+JSON.stringify(request));

    const intent = request.intent;
    const intentName = request.intent.name;

    // Dispatch to your skill's intent handlers
    // if (intentName === 'PlanMyTrip') {
    //     planMyTrip(request, session, callback);
    // }else 
    if (intentName === 'mortgageRates') {
        checkMortgageRates(request, session, callback);
    }
    else  if (intentName === 'mortgageRatesForProvider') {
        checkMortgageProviderRates(request, session, callback);
    }
  
    else if (intentName === 'AMAZON.HelpIntent') {
        getWelcomeResponse(callback);
    } else if (intentName === 'AMAZON.StopIntent' || intentName === 'AMAZON.CancelIntent') {
        handleSessionEndRequest(callback);
    } else {
        throw new Error('Invalid intent');
    }
}

/**
 * Called when the user ends the session.
 * Is not called when the skill returns shouldEndSession=true.
 */
function onSessionEnded(sessionEndedRequest, session) {
    console.log(`onSessionEnded requestId=${sessionEndedRequest.requestId}, sessionId=${session.sessionId}`);
    // Add cleanup logic here
}



exports.handler = (event, context, callback) => {


 
    try {
        // console.log(`event.session.application.applicationId=${event.session.application.applicationId}`);
        console.log("EVENT=====" + JSON.stringify(event));

        /**
         * Uncomment this if statement and populate with your skill's application ID to
         * prevent someone else from configuring a skill that sends requests to this function.
         */
        /*
        if (event.session.application.applicationId !== 'amzn1.echo-sdk-ams.app.[unique-value-here]') {
             callback('Invalid Application ID');
        }
        */

        if (event.session.new) {
            onSessionStarted({ requestId: event.request.requestId }, event.session);
        }

        if (event.request.type === 'LaunchRequest') {
            onLaunch(event.request,
                event.session,
                (sessionAttributes, speechletResponse) => {
                    callback(null, buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === 'IntentRequest') {
            onIntent(event.request,
                event.session,
                (sessionAttributes, speechletResponse) => {
                    callback(null, buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === 'SessionEndedRequest') {
            onSessionEnded(event.request, event.session);
            callback();
        }
    } catch (err) {
        callback(err);
    }
};



